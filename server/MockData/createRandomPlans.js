const { Pool } = require("pg");
const config = require("../config.json");
const routes = require("../routes.js");
// console.log("Imported createPlan:", createPlan)

const connection = new Pool({
    user: config.rds_user,
    host: config.rds_host,
    database: config.rds_db,
    password: config.rds_password,
    port: config.rds_port,
    ssl: { rejectUnauthorized: false },
});

// Generated by the following query:
// SELECT
// f.flight_id,
//     h.hotel_id,
//     split_part(f.origin_airport_city, ',', 1) AS origin_city,
//     SPLIT_PART(f.destination_airport_city, ',', 1) AS destination_city
// FROM Flight f
// JOIN Hotel h
// ON SPLIT_PART(f.destination_airport_city, ',', 1) = h.city
// WHERE
// SPLIT_PART(f.destination_airport_city, ',', 1) = 'Philadelphia'
// OR SPLIT_PART(f.origin_airport_city, ',', 1) = 'Philadelphia'
// ORDER BY RANDOM()
// LIMIT 30;

const queryResult = [
    [13399, 1286110, "Cleveland", "Philadelphia"],
    [30082, 1153365, "Miami", "Philadelphia"],
    [8006, 1158894, "Philadelphia", "San Francisco"],
    [16503, 1098213, "Los Angeles", "Philadelphia"],
    [101167, 1157320, "Chicago", "Philadelphia"],
    [44884, 1556760, "Boston", "Philadelphia"],
    [44966, 1269709, "Miami", "Philadelphia"],
    [56374, 1015599, "Philadelphia", "San Francisco"],
    [36297, 1853868, "Philadelphia", "Phoenix"],
    [29510, 5000772, "Columbus", "Philadelphia"],
    [68698, 1640426, "Dallas/Fort Worth", "Philadelphia"],
    [94378, 1257806, "Dallas/Fort Worth", "Philadelphia"],
    [75744, 1232372, "Boston", "Philadelphia"],
    [105672, 1232372, "Boston", "Philadelphia"],
    [11350, 1269507, "Dallas/Fort Worth", "Philadelphia"],
    [13167, 1287533, "Philadelphia", "Tampa"],
    [91295, 1338738, "Philadelphia", "San Francisco"],
    [103585, 1229454, "Philadelphia", "San Francisco"],
    [20256, 1816090, "Cleveland", "Philadelphia"],
    [15955, 1232372, "Miami", "Philadelphia"],
    [97472, 1291513, "Philadelphia", "Phoenix"],
    [69044, 1448462, "Los Angeles", "Philadelphia"],
    [46684, 1339094, "Chicago", "Philadelphia"],
    [71546, 1269217, "Miami", "Philadelphia"],
    [38465, 1341615, "Houston", "Philadelphia"],
    [48746, 1248386, "Los Angeles", "Philadelphia"],
    [3568, 1324656, "Philadelphia", "San Francisco"],
    [29226, 5167726, "Los Angeles", "Philadelphia"],
    [23132, 1196588, "Dallas/Fort Worth", "Philadelphia"],
    [39424, 1243292, "Philadelphia", "Phoenix"]
];

const mockResponse = () => {
    const res = {};
    res.status = (code) => {
        res.statusCode = code;
        return res;
    };
    res.json = (data) => {
        res.data = data;
        console.log("Response:", res.statusCode, res.data);
        return res;
    };
    return res;
}

const generateRandomPlan = async () => {
    const client = await connection.connect();
    try {
        // get random users
        const {rows: users} = await client.query(`SELECT email FROM Users ORDER BY RANDOM() LIMIT 10`);
        if (users.length === 0) {
            console.log("No users found in the database!");
            return;
        }

        // get random combinations of flights and hotels
        const {rows: queryResult} = await client.query(`
        SELECT f.flight_id, h.hotel_id,
            split_part(f.origin_airport_city, ',', 1) AS origin_city,
            SPLIT_PART(f.destination_airport_city, ',', 1) AS destination_city
        FROM Flight f
        JOIN Hotel h
        ON SPLIT_PART(f.destination_airport_city, ',', 1) = h.city
        WHERE SPLIT_PART(f.destination_airport_city, ',', 1) = 'Philadelphia'
            OR SPLIT_PART(f.origin_airport_city, ',', 1) = 'Philadelphia'
        ORDER BY RANDOM()
        LIMIT 30; `);

        // begin transaction
        await client.query("BEGIN");

        for (let i = 0; i < users.length; i++) {
            const user = users[i];
            // random plan size
            const planSize = Math.floor(Math.random() * 3) + 1;

            const selectedFlights = queryResult
                .sort(() => 0.5 - Math.random())
                .slice(0, planSize)
                .map((row) => row.flight_id);

            const selectedHotels = queryResult
                .sort(() => 0.5 - Math.random())
                .slice(0, planSize)
                .map((row) => row.hotel_id);

            const totalCost = (Math.random() * 50000).toFixed(2);

            const req = {
                params: { id: user.email },
                body: { total_cost: totalCost, flights: selectedFlights, hotels: selectedHotels }
            };

            const res = mockResponse();
            await routes.createPlan(req, res);

            console.log(
                `Plan created for ${user.email} with ${planSize} flights and ${planSize} hotels`
            );
        }

        await client.query("COMMIT");
        console.log("Random plans created successfully!");
    } catch (error) {
        await client.query("ROLLBACK");
        console.error("Error in generateRandomPlan:", error);
    } finally {
        client.release();
    }
}

generateRandomPlan();